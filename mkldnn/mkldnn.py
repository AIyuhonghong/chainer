# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mkldnn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mkldnn')
    _mkldnn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mkldnn', [dirname(__file__)])
        except ImportError:
            import _mkldnn
            return _mkldnn
        try:
            _mod = imp.load_module('_mkldnn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mkldnn = swig_import_helper()
    del swig_import_helper
else:
    import _mkldnn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def global_init():
    return _mkldnn.global_init()
global_init = _mkldnn.global_init

def enabled():
    return _mkldnn.enabled()
enabled = _mkldnn.enabled
class LayerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_mkldnn.LayerFactory_getInstance)
    else:
        getInstance = _mkldnn.LayerFactory_getInstance

    def getRELULayer(self, size):
        return _mkldnn.LayerFactory_getRELULayer(self, size)

    def setRELULayer(self, size, layer):
        return _mkldnn.LayerFactory_setRELULayer(self, size, layer)

    def getMaxPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w):
        return _mkldnn.LayerFactory_getMaxPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w)

    def setMaxPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w, layer):
        return _mkldnn.LayerFactory_setMaxPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w, layer)

    def getAvgPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w):
        return _mkldnn.LayerFactory_getAvgPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w)

    def setAvgPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w, layer):
        return _mkldnn.LayerFactory_setAvgPoolLayer(self, x_d1, x_d2, x_d3, x_d4, stride_y, stride_x, ksize_h, ksize_w, pad_l_h, pad_l_w, pad_r_h, pad_r_w, layer)

    def getLRNLayer(self, x_d1, x_d2, x_d3, x_d4, local_size, alpha, beta):
        return _mkldnn.LayerFactory_getLRNLayer(self, x_d1, x_d2, x_d3, x_d4, local_size, alpha, beta)

    def setLRNLayer(self, x_d1, x_d2, x_d3, x_d4, local_size, alpha, beta, layer):
        return _mkldnn.LayerFactory_setLRNLayer(self, x_d1, x_d2, x_d3, x_d4, local_size, alpha, beta, layer)

    def getSoftmax2DLayer(self, d1, d2, axis):
        return _mkldnn.LayerFactory_getSoftmax2DLayer(self, d1, d2, axis)

    def setSoftmax2DLayer(self, d1, d2, axis, layer):
        return _mkldnn.LayerFactory_setSoftmax2DLayer(self, d1, d2, axis, layer)

    def getSoftmax4DLayer(self, d1, d2, d3, d4, axis):
        return _mkldnn.LayerFactory_getSoftmax4DLayer(self, d1, d2, d3, d4, axis)

    def setSoftmax4DLayer(self, d1, d2, d3, d4, axis, layer):
        return _mkldnn.LayerFactory_setSoftmax4DLayer(self, d1, d2, d3, d4, axis, layer)
    __swig_destroy__ = _mkldnn.delete_LayerFactory
    __del__ = lambda self: None
LayerFactory_swigregister = _mkldnn.LayerFactory_swigregister
LayerFactory_swigregister(LayerFactory)

def LayerFactory_getInstance():
    return _mkldnn.LayerFactory_getInstance()
LayerFactory_getInstance = _mkldnn.LayerFactory_getInstance

class lrn_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lrn_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lrn_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha"] = _mkldnn.lrn_params_alpha_set
    __swig_getmethods__["alpha"] = _mkldnn.lrn_params_alpha_get
    if _newclass:
        alpha = _swig_property(_mkldnn.lrn_params_alpha_get, _mkldnn.lrn_params_alpha_set)
    __swig_setmethods__["beta"] = _mkldnn.lrn_params_beta_set
    __swig_getmethods__["beta"] = _mkldnn.lrn_params_beta_get
    if _newclass:
        beta = _swig_property(_mkldnn.lrn_params_beta_get, _mkldnn.lrn_params_beta_set)
    __swig_setmethods__["k"] = _mkldnn.lrn_params_k_set
    __swig_getmethods__["k"] = _mkldnn.lrn_params_k_get
    if _newclass:
        k = _swig_property(_mkldnn.lrn_params_k_get, _mkldnn.lrn_params_k_set)
    __swig_setmethods__["local_size"] = _mkldnn.lrn_params_local_size_set
    __swig_getmethods__["local_size"] = _mkldnn.lrn_params_local_size_get
    if _newclass:
        local_size = _swig_property(_mkldnn.lrn_params_local_size_get, _mkldnn.lrn_params_local_size_set)
    __swig_setmethods__["aprop_kind"] = _mkldnn.lrn_params_aprop_kind_set
    __swig_getmethods__["aprop_kind"] = _mkldnn.lrn_params_aprop_kind_get
    if _newclass:
        aprop_kind = _swig_property(_mkldnn.lrn_params_aprop_kind_get, _mkldnn.lrn_params_aprop_kind_set)
    __swig_setmethods__["aalgorithm"] = _mkldnn.lrn_params_aalgorithm_set
    __swig_getmethods__["aalgorithm"] = _mkldnn.lrn_params_aalgorithm_get
    if _newclass:
        aalgorithm = _swig_property(_mkldnn.lrn_params_aalgorithm_get, _mkldnn.lrn_params_aalgorithm_set)
    __swig_setmethods__["data_format"] = _mkldnn.lrn_params_data_format_set
    __swig_getmethods__["data_format"] = _mkldnn.lrn_params_data_format_get
    if _newclass:
        data_format = _swig_property(_mkldnn.lrn_params_data_format_get, _mkldnn.lrn_params_data_format_set)
    __swig_setmethods__["diff_data_format"] = _mkldnn.lrn_params_diff_data_format_set
    __swig_getmethods__["diff_data_format"] = _mkldnn.lrn_params_diff_data_format_get
    if _newclass:
        diff_data_format = _swig_property(_mkldnn.lrn_params_diff_data_format_get, _mkldnn.lrn_params_diff_data_format_set)

    def __init__(self):
        this = _mkldnn.new_lrn_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mkldnn.delete_lrn_params
    __del__ = lambda self: None
lrn_params_swigregister = _mkldnn.lrn_params_swigregister
lrn_params_swigregister(lrn_params)

class Layer_F32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer_F32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer_F32, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mkldnn.delete_Layer_F32
    __del__ = lambda self: None

    def forward(self):
        return _mkldnn.Layer_F32_forward(self)

    def backward(self):
        return _mkldnn.Layer_F32_backward(self)

    def setup_forward(self):
        return _mkldnn.Layer_F32_setup_forward(self)

    def setup_backward(self):
        return _mkldnn.Layer_F32_setup_backward(self)

    def __init__(self):
        this = _mkldnn.new_Layer_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Layer_F32_swigregister = _mkldnn.Layer_F32_swigregister
Layer_F32_swigregister(Layer_F32)

class Convolution2D_F32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convolution2D_F32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convolution2D_F32, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mkldnn.new_Convolution2D_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mkldnn.delete_Convolution2D_F32
    __del__ = lambda self: None

    def forward_setup(self, x, W, b, y, s1, s2, p1, p2):
        return _mkldnn.Convolution2D_F32_forward_setup(self, x, W, b, y, s1, s2, p1, p2)

    def forward(self, *args):
        return _mkldnn.Convolution2D_F32_forward(self, *args)

    def backward_setup(self, x, W, b, gy, gW, gx, gb):
        return _mkldnn.Convolution2D_F32_backward_setup(self, x, W, b, gy, gW, gx, gb)

    def backward(self, *args):
        return _mkldnn.Convolution2D_F32_backward(self, *args)
Convolution2D_F32_swigregister = _mkldnn.Convolution2D_F32_swigregister
Convolution2D_F32_swigregister(Convolution2D_F32)

class Pooling_F32(Layer_F32):
    __swig_setmethods__ = {}
    for _s in [Layer_F32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pooling_F32, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer_F32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pooling_F32, name)
    __repr__ = _swig_repr

    def forward(self, x, y, ws):
        return _mkldnn.Pooling_F32_forward(self, x, y, ws)

    def backward(self, gy, x, gx, ws):
        return _mkldnn.Pooling_F32_backward(self, gy, x, gx, ws)

    def forward_setup(self, x_d1, x_d2, x_d3, x_d4, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind):
        return _mkldnn.Pooling_F32_forward_setup(self, x_d1, x_d2, x_d3, x_d4, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind)

    def backward_setup(self, x_d1, x_d2, x_d3, x_d4, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind):
        return _mkldnn.Pooling_F32_backward_setup(self, x_d1, x_d2, x_d3, x_d4, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind)
    if _newclass:
        get_forward_object = staticmethod(_mkldnn.Pooling_F32_get_forward_object)
    else:
        get_forward_object = _mkldnn.Pooling_F32_get_forward_object
    if _newclass:
        get_backward_object = staticmethod(_mkldnn.Pooling_F32_get_backward_object)
    else:
        get_backward_object = _mkldnn.Pooling_F32_get_backward_object
    if _newclass:
        do_forward = staticmethod(_mkldnn.Pooling_F32_do_forward)
    else:
        do_forward = _mkldnn.Pooling_F32_do_forward
    if _newclass:
        do_backward = staticmethod(_mkldnn.Pooling_F32_do_backward)
    else:
        do_backward = _mkldnn.Pooling_F32_do_backward

    def __init__(self):
        this = _mkldnn.new_Pooling_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mkldnn.delete_Pooling_F32
    __del__ = lambda self: None
Pooling_F32_swigregister = _mkldnn.Pooling_F32_swigregister
Pooling_F32_swigregister(Pooling_F32)

def Pooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind):
    return _mkldnn.Pooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind)
Pooling_F32_get_forward_object = _mkldnn.Pooling_F32_get_forward_object

def Pooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind):
    return _mkldnn.Pooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w, alg_kind)
Pooling_F32_get_backward_object = _mkldnn.Pooling_F32_get_backward_object

def Pooling_F32_do_forward(*args):
    return _mkldnn.Pooling_F32_do_forward(*args)
Pooling_F32_do_forward = _mkldnn.Pooling_F32_do_forward

def Pooling_F32_do_backward(*args):
    return _mkldnn.Pooling_F32_do_backward(*args)
Pooling_F32_do_backward = _mkldnn.Pooling_F32_do_backward

class MaxPooling_F32(Pooling_F32):
    __swig_setmethods__ = {}
    for _s in [Pooling_F32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxPooling_F32, name, value)
    __swig_getmethods__ = {}
    for _s in [Pooling_F32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxPooling_F32, name)
    __repr__ = _swig_repr
    if _newclass:
        get_forward_object = staticmethod(_mkldnn.MaxPooling_F32_get_forward_object)
    else:
        get_forward_object = _mkldnn.MaxPooling_F32_get_forward_object
    if _newclass:
        get_backward_object = staticmethod(_mkldnn.MaxPooling_F32_get_backward_object)
    else:
        get_backward_object = _mkldnn.MaxPooling_F32_get_backward_object
    if _newclass:
        do_forward = staticmethod(_mkldnn.MaxPooling_F32_do_forward)
    else:
        do_forward = _mkldnn.MaxPooling_F32_do_forward
    if _newclass:
        do_backward = staticmethod(_mkldnn.MaxPooling_F32_do_backward)
    else:
        do_backward = _mkldnn.MaxPooling_F32_do_backward

    def __init__(self):
        this = _mkldnn.new_MaxPooling_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mkldnn.delete_MaxPooling_F32
    __del__ = lambda self: None
MaxPooling_F32_swigregister = _mkldnn.MaxPooling_F32_swigregister
MaxPooling_F32_swigregister(MaxPooling_F32)

def MaxPooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.MaxPooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w)
MaxPooling_F32_get_forward_object = _mkldnn.MaxPooling_F32_get_forward_object

def MaxPooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.MaxPooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w)
MaxPooling_F32_get_backward_object = _mkldnn.MaxPooling_F32_get_backward_object

def MaxPooling_F32_do_forward(x, y, ws, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.MaxPooling_F32_do_forward(x, y, ws, s_y, s_x, p_h, p_w, ker_h, ker_w)
MaxPooling_F32_do_forward = _mkldnn.MaxPooling_F32_do_forward

def MaxPooling_F32_do_backward(gy, x, gx, ws, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.MaxPooling_F32_do_backward(gy, x, gx, ws, s_y, s_x, p_h, p_w, ker_h, ker_w)
MaxPooling_F32_do_backward = _mkldnn.MaxPooling_F32_do_backward

class Relu_F32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Relu_F32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Relu_F32, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mkldnn.new_Relu_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def test_buf(self, x, y):
        return _mkldnn.Relu_F32_test_buf(self, x, y)

    def forward_setup(self, x, y):
        return _mkldnn.Relu_F32_forward_setup(self, x, y)

    def forward(self, x, y):
        return _mkldnn.Relu_F32_forward(self, x, y)

    def backward_setup(self, x, gy, gx):
        return _mkldnn.Relu_F32_backward_setup(self, x, gy, gx)

    def backward(self, x, gy, gx):
        return _mkldnn.Relu_F32_backward(self, x, gy, gx)
    __swig_destroy__ = _mkldnn.delete_Relu_F32
    __del__ = lambda self: None
Relu_F32_swigregister = _mkldnn.Relu_F32_swigregister
Relu_F32_swigregister(Relu_F32)

class AvgPooling_F32(Pooling_F32):
    __swig_setmethods__ = {}
    for _s in [Pooling_F32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPooling_F32, name, value)
    __swig_getmethods__ = {}
    for _s in [Pooling_F32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPooling_F32, name)
    __repr__ = _swig_repr
    if _newclass:
        get_forward_object = staticmethod(_mkldnn.AvgPooling_F32_get_forward_object)
    else:
        get_forward_object = _mkldnn.AvgPooling_F32_get_forward_object
    if _newclass:
        get_backward_object = staticmethod(_mkldnn.AvgPooling_F32_get_backward_object)
    else:
        get_backward_object = _mkldnn.AvgPooling_F32_get_backward_object
    if _newclass:
        do_forward = staticmethod(_mkldnn.AvgPooling_F32_do_forward)
    else:
        do_forward = _mkldnn.AvgPooling_F32_do_forward
    if _newclass:
        do_backward = staticmethod(_mkldnn.AvgPooling_F32_do_backward)
    else:
        do_backward = _mkldnn.AvgPooling_F32_do_backward

    def __init__(self):
        this = _mkldnn.new_AvgPooling_F32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mkldnn.delete_AvgPooling_F32
    __del__ = lambda self: None
AvgPooling_F32_swigregister = _mkldnn.AvgPooling_F32_swigregister
AvgPooling_F32_swigregister(AvgPooling_F32)

def AvgPooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.AvgPooling_F32_get_forward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w)
AvgPooling_F32_get_forward_object = _mkldnn.AvgPooling_F32_get_forward_object

def AvgPooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.AvgPooling_F32_get_backward_object(x, s_y, s_x, p_h, p_w, ker_h, ker_w)
AvgPooling_F32_get_backward_object = _mkldnn.AvgPooling_F32_get_backward_object

def AvgPooling_F32_do_forward(x, y, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.AvgPooling_F32_do_forward(x, y, s_y, s_x, p_h, p_w, ker_h, ker_w)
AvgPooling_F32_do_forward = _mkldnn.AvgPooling_F32_do_forward

def AvgPooling_F32_do_backward(gy, x, gx, s_y, s_x, p_h, p_w, ker_h, ker_w):
    return _mkldnn.AvgPooling_F32_do_backward(gy, x, gx, s_y, s_x, p_h, p_w, ker_h, ker_w)
AvgPooling_F32_do_backward = _mkldnn.AvgPooling_F32_do_backward

class Softmax_F32(Layer_F32):
    __swig_setmethods__ = {}
    for _s in [Layer_F32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Softmax_F32, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer_F32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Softmax_F32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mkldnn.new_Softmax_F32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update_user_mem(self, x, y):
        return _mkldnn.Softmax_F32_update_user_mem(self, x, y)

    def update_user_data(self, src_mem, dst_mem):
        return _mkldnn.Softmax_F32_update_user_data(self, src_mem, dst_mem)

    def is_first_fwd(self):
        return _mkldnn.Softmax_F32_is_first_fwd(self)

    def mark_first_fwd(self):
        return _mkldnn.Softmax_F32_mark_first_fwd(self)
    if _newclass:
        softmax_create_forward = staticmethod(_mkldnn.Softmax_F32_softmax_create_forward)
    else:
        softmax_create_forward = _mkldnn.Softmax_F32_softmax_create_forward

    def get_res_size(self):
        return _mkldnn.Softmax_F32_get_res_size(self)

    def forward(self):
        return _mkldnn.Softmax_F32_forward(self)

    def backward(self):
        return _mkldnn.Softmax_F32_backward(self)

    def setup_forward(self):
        return _mkldnn.Softmax_F32_setup_forward(self)

    def setup_backward(self):
        return _mkldnn.Softmax_F32_setup_backward(self)
    __swig_destroy__ = _mkldnn.delete_Softmax_F32
    __del__ = lambda self: None
Softmax_F32_swigregister = _mkldnn.Softmax_F32_swigregister
Softmax_F32_swigregister(Softmax_F32)

def Softmax_F32_softmax_create_forward(x, y, dims, axis):
    return _mkldnn.Softmax_F32_softmax_create_forward(x, y, dims, axis)
Softmax_F32_softmax_create_forward = _mkldnn.Softmax_F32_softmax_create_forward

class LocalResponseNormalization_F32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalResponseNormalization_F32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalResponseNormalization_F32, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mkldnn.delete_LocalResponseNormalization_F32
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _mkldnn.new_LocalResponseNormalization_F32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def forward(self):
        return _mkldnn.LocalResponseNormalization_F32_forward(self)

    def backward(self, gy, x, gx):
        return _mkldnn.LocalResponseNormalization_F32_backward(self, gy, x, gx)
LocalResponseNormalization_F32_swigregister = _mkldnn.LocalResponseNormalization_F32_swigregister
LocalResponseNormalization_F32_swigregister(LocalResponseNormalization_F32)

# This file is compatible with both classic and new-style classes.


